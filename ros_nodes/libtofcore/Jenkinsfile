@Library('Preact') _

import net.preact.S3Utils

pipeline {
    agent any

    environment {
        //Use our build number generator web service to create a unique build number.
        UNIQUE_BUILD_NUMBER = sh(script: "curl --silent 'http://jenkins.preact.net:51212/libtofcore'", , returnStdout: true)
    }

    stages {
        stage('Preparation') {
            steps {
                bitbucketStatusNotify ( buildState: 'INPROGRESS' )
                script {
                    currentBuild.displayName = "#" + env.UNIQUE_BUILD_NUMBER

                    // Pull arm64 docker image.. agent doesn't seem to support pull args to specify platform
                    docker.withRegistry("https://940956394783.dkr.ecr.us-west-2.amazonaws.com", "ecr:us-west-2:AWS-ECR-Build-Pipeline-FleetEdge") {
                        sh 'docker pull --platform linux/arm64 940956394783.dkr.ecr.us-west-2.amazonaws.com/orin-dev:0.1'
                    }
                }
            }
        }
        stage('Build') {
            parallel {
                stage('Linux Build') {
                    agent {
                        docker {
                            alwaysPull true
                            image 'oasis-dev:1.106'
                            registryUrl 'https://582077591549.dkr.ecr.us-west-2.amazonaws.com'
                            registryCredentialsId 'ecr:us-west-2:AWS-ECR-Build-Pipeline'
                            //Setup special cmdline args to docker
                            // - Don't use our development entrypoint script, this allows jenkins UID to be used. 
                            // - Mount [/etc/passwd|shaddow]so that the jenkins UID can be associated with the jenkins user.
                            args '--entrypoint="" -v /etc/passwd:/etc/passwd -v /etc/shadow:/etc/shadow'
                        }
                    }
                    steps {
                        sh '''
                            mkdir -p dist/linux/internal
                            mkdir -p dist/linux/external

                            # Build and package tofcrust (internal)
                            cmake -B build-linux
                            make -C build-linux VERBOSE=1 -j\$(nproc)
                            cd build-linux
                            cpack
                            cd ../
                            cp build-linux/*.deb dist/linux/internal

                            # Build and package tofcore (external)
                            cd tofcore
                            cmake -B build-linux
                            make -C build-linux VERBOSE=1 -j\$(nproc)
                            cd build-linux
                            cpack
                            cd ../..
                            cp tofcore/build-linux/*.deb dist/linux/external

                            # needed for python wheels
                            cp build-linux/tofcore/wrappers/python/*.so tofcore/wrappers/python/pytofcore
                            cp build-linux/tofcrust/wrappers/python/*.so tofcrust/wrappers/python/pytofcrust
                            cp build-linux/tofcore/wrappers/python/*.so tofcrust/wrappers/python/pytofcrust
                            
                            # Build python wheels
                            export CMAKE_BUILD_PARALLEL_LEVEL=$(nproc)
                            cp tofcore/wrappers/python/setup.py .
                            cp -r tofcore/wrappers/python/pytofcore .
                            python3 setup.py bdist_wheel -d ./dist/linux/external

                            cp tofcrust/wrappers/python/setup.py ./setup_tofcrust.py
                            cp -r tofcrust/wrappers/python/pytofcrust .
                            python3 setup_tofcrust.py bdist_wheel -d ./dist/linux/internal
                            '''
                    }
                    post {
                        always {
                            archiveArtifacts allowEmptyArchive: true, artifacts: 'dist/**,', followSymlinks: false

                            // Push artifacts to s3
                            script {
                                String localPath = 'dist'
                                String bucketName = 'preact-data'
                                String s3Path
                                if (env.BRANCH_NAME == 'develop') {
                                    s3Path = "sw/oasis/utilities/dev/${env.UNIQUE_BUILD_NUMBER}"
                                } else if (env.BRANCH_NAME.startsWith('release/')) {
                                    s3Path = "sw/oasis/utilities/staging/${env.UNIQUE_BUILD_NUMBER}"
                                }
                                S3Utils.upload(this, localPath, bucketName, s3Path, [disableBadge: true, disableSummary: true])
                            }
                        }
                        cleanup {
                            cleanWs()
                        }
                    }
                }

                stage('Linux ARM64 Build') {
                    agent {
                        docker {
                            image 'orin-dev:0.1'
                            registryUrl 'https://940956394783.dkr.ecr.us-west-2.amazonaws.com'
                            registryCredentialsId 'ecr:us-west-2:AWS-ECR-Build-Pipeline-FleetEdge'
                            //Setup special cmdline args to docker
                            // - Don't use our development entrypoint script, this allows jenkins UID to be used. 
                            // - Mount [/etc/passwd|shaddow]so that the jenkins UID can be associated with the jenkins user.
                            args '--platform=linux/arm64 --entrypoint="" -v /etc/passwd:/etc/passwd -v /etc/shadow:/etc/shadow'
                        }
                    }
                    steps {
                        sh '''
                            mkdir -p dist/linux-arm64/internal
                            mkdir -p dist/linux-arm64/external

                            # Build and package tofcrust (internal)
                            cmake -B build-linux-arm64
                            make -C build-linux-arm64 VERBOSE=1 -j\$(nproc)
                            cd build-linux-arm64
                            cpack
                            cd ../
                            cp build-linux-arm64/*.deb dist/linux-arm64/internal

                            # Build and package tofcore (external)
                            cd tofcore
                            cmake -B build-linux-arm64
                            make -C build-linux-arm64 VERBOSE=1 -j\$(nproc)
                            cd build-linux-arm64
                            cpack
                            cd ../..
                            cp tofcore/build-linux-arm64/*.deb dist/linux-arm64/external
                        '''
                    }
                    post {
                        always {
                            archiveArtifacts allowEmptyArchive: true, artifacts: 'dist/**,', followSymlinks: false

                            // Push artifacts to s3
                            script {
                                String localPath = 'dist'
                                String bucketName = 'preact-data'
                                String s3Path
                                if (env.BRANCH_NAME == 'develop') {
                                    s3Path = "sw/oasis/utilities/dev/${env.UNIQUE_BUILD_NUMBER}"
                                } else if (env.BRANCH_NAME.startsWith('release/')) {
                                    s3Path = "sw/oasis/utilities/staging/${env.UNIQUE_BUILD_NUMBER}"
                                }
                                S3Utils.upload(this, localPath, bucketName, s3Path, [disableBadge: true, disableSummary: true])
                            }
                        }
                        cleanup {
                            cleanWs()
                        }
                    }
                }

                stage('Windows Build') {
                    agent {
                        docker {
                            alwaysPull true
                            image 'oasis-win-dev:1.0.64-ltsc2022'
                            registryUrl 'https://582077591549.dkr.ecr.us-west-2.amazonaws.com'
                            registryCredentialsId 'ecr:us-west-2:AWS-ECR-Build-Pipeline'
                            label 'windows-server-2022'
                        }
                    }
                    steps {
                        bat '''
                            call "C:\\Program Files (x86)\\Microsoft Visual Studio\\2022\\BuildTools\\Common7\\Tools\\VsDevCmd.bat" -arch=amd64

                            cmake -DCMAKE_TOOLCHAIN_FILE=C:/vcpkg/scripts/buildsystems/vcpkg.cmake ^
                                -DVCPKG_TARGET_TRIPLET=x64-windows-static ^
                                -DCMAKE_MSVC_RUNTIME_LIBRARY=MultiThreaded ^
                                -DBoost_NO_WARN_NEW_VERSIONS=1 ^
                                -DCMAKE_INSTALL_PREFIX=dist/win ^
                                -DVERSION_PACKAGE="1.0.${env.UNIQUE_BUILD_NUMBER}" ^
                                -DBUILD_PYTHON_BINDINGS=OFF ^
                                -Wno-dev ^
                                -B build/general -S .
                            cmake --build build\\general --config release --parallel 4 --target install

                            cd tofcore
                            cmake -DCMAKE_TOOLCHAIN_FILE=C:/vcpkg/scripts/buildsystems/vcpkg.cmake ^
                                -DVCPKG_TARGET_TRIPLET=x64-windows-static ^
                                -DCMAKE_MSVC_RUNTIME_LIBRARY=MultiThreaded ^
                                -DBoost_NO_WARN_NEW_VERSIONS=1 ^
                                -DCMAKE_INSTALL_PREFIX=dist/win ^
                                -DVERSION_PACKAGE="1.0.${env.UNIQUE_BUILD_NUMBER}" ^
                                -DBUILD_PYTHON_BINDINGS=OFF ^
                                -Wno-dev ^
                                -B build/general -S .
                            cmake --build build\\general --config release --parallel 4 --target install
                            
                            cd build\\general
                            cpack
                            cd ..\\..\\..\\
                            copy tofcore\\build\\general\\*.exe dist\\win

                            cmake -DCMAKE_TOOLCHAIN_FILE=C:/vcpkg/scripts/buildsystems/vcpkg.cmake ^
                                -DVCPKG_TARGET_TRIPLET=x64-windows-static ^
                                -DCMAKE_MSVC_RUNTIME_LIBRARY=MultiThreaded ^
                                -DBoost_NO_WARN_NEW_VERSIONS=1 ^
                                -DCMAKE_INSTALL_PREFIX=dist/win ^
                                -DVERSION_PACKAGE="1.0.${env.UNIQUE_BUILD_NUMBER}" ^
                                -DPYBIND11_PYTHON_VERSION="3.11" -DPYTHON_EXECUTABLE="C:/Program Files/python311/python.exe" ^
                                -Wno-dev ^
                                -B build/py311 -S .
                            cmake --build build/py311 --config release --parallel 4 --target pytofcrust
                            cmake --build build/py311 --config release --parallel 4 --target pytofcore

                            copy build\\py311\\tofcore\\wrappers\\python\\release\\*.pyd tofcore\\wrappers\\python\\pytofcore
                            copy build\\py311\\tofcrust\\wrappers\\python\\release\\*.pyd tofcrust\\wrappers\\python\\pytofcrust
                            copy build\\py311\\tofcore\\wrappers\\python\\release\\*.pyd tofcrust\\wrappers\\python\\pytofcrust
                            copy tofcore\\wrappers\\python\\setup.py .
                            copy tofcrust\\wrappers\\python\\setup.py .\\setup_tofcrust.py
                            xcopy tofcore\\wrappers\\python\\pytofcore .\\pytofcore\\ /s /e
                            xcopy tofcrust\\wrappers\\python\\pytofcrust .\\pytofcrust\\ /s /e
                            "C:\\Program Files\\python311\\python.exe" -m pip install wheel
                            "C:\\Program Files\\python311\\python.exe" setup.py bdist_wheel -d dist\\win
                            "C:\\Program Files\\python311\\python.exe" setup_tofcrust.py bdist_wheel -d dist\\win

                            rmdir /s /q pytofcore
                            rmdir /s /q pytofcrust
                            del tofcore\\wrappers\\python\\pytofcore\\*.pyd
                            del tofcrust\\wrappers\\python\\pytofcrust\\*.pyd

                            cmake -DCMAKE_TOOLCHAIN_FILE=C:/vcpkg/scripts/buildsystems/vcpkg.cmake ^
                                -DVCPKG_TARGET_TRIPLET=x64-windows-static ^
                                -DCMAKE_MSVC_RUNTIME_LIBRARY=MultiThreaded ^
                                -DBoost_NO_WARN_NEW_VERSIONS=1 ^
                                -DCMAKE_INSTALL_PREFIX=dist/win ^
                                -DVERSION_PACKAGE="1.0.${env.UNIQUE_BUILD_NUMBER}" ^
                                -DPYBIND11_PYTHON_VERSION="3.8" -DPYTHON_EXECUTABLE="C:/Program Files/python38/python.exe" ^
                                -Wno-dev ^
                                -B build/py38 -S .
                            cmake --build build/py38 --config release --parallel 4 --target pytofcrust
                            cmake --build build/py38 --config release --parallel 4 --target pytofcore

                            copy build\\py38\\tofcrust\\wrappers\\python\\release\\*.pyd tofcrust\\wrappers\\python\\pytofcrust
                            copy build\\py38\\tofcore\\wrappers\\python\\release\\*.pyd tofcrust\\wrappers\\python\\pytofcrust
                            xcopy tofcrust\\wrappers\\python\\pytofcrust .\\pytofcrust\\ /s /e
                            "C:\\Program Files\\python38\\python.exe" -m pip install wheel
                            "C:\\Program Files\\python38\\python.exe" setup_tofcrust.py bdist_wheel -d dist\\win

                            copy build\\py38\\tofcore\\wrappers\\python\\release\\*.pyd tofcore\\wrappers\\python\\pytofcore
                            xcopy tofcore\\wrappers\\python\\pytofcore .\\pytofcore\\ /s /e
                            "C:\\Program Files\\python38\\python.exe" setup.py bdist_wheel -d dist\\win
                        '''
                    }
                    post {
                        always {
                            archiveArtifacts allowEmptyArchive: true, artifacts: 'dist/**,', followSymlinks: false

                            // Push artifacts to s3
                            script {
                                String localPath = 'dist'
                                String bucketName = 'preact-data'
                                String s3Path
                                if (env.BRANCH_NAME == 'develop') {
                                    s3Path = "sw/oasis/utilities/dev/${env.UNIQUE_BUILD_NUMBER}"
                                } else if (env.BRANCH_NAME.startsWith('release/')) {
                                    s3Path = "sw/oasis/utilities/staging/${env.UNIQUE_BUILD_NUMBER}"
                                }
                                S3Utils.upload(this, localPath, bucketName, s3Path)
                            }
                        }
                        cleanup {
                            cleanWs disableDeferredWipeout: true, deleteDirs: true, notFailBuild: true
                        }
                    }
                }
            }
        }
        stage('HIL Tests') {
            steps {
                script {
                    if (env.BRANCH_NAME == 'develop') {
                        // Trigger 'develop' smoke tests which use latest `develop` oasis/tofcore
                        build job: 'HIL/Mojave/develop/smoke-tests', propagate: false
                    }
                }
            }
        }
    }


    post {
        success {
            bitbucketStatusNotify(buildState: 'SUCCESSFUL')
        }
        failure {
            bitbucketStatusNotify(buildState: 'FAILED')
            emailext (
                subject: "FAILED: Job ${env.JOB_NAME} #${env.UNIQUE_BUILD_NUMBER}",
                body: """FAILED: Job ${env.JOB_NAME} #${env.UNIQUE_BUILD_NUMBER}
                            Check console output at: ${env.BUILD_URL}""",
                recipientProviders: [[$class: 'DevelopersRecipientProvider'], [$class: 'RequesterRecipientProvider']])
        }
    }
}
